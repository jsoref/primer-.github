name: Release

on:
  workflow_call:
    inputs:
      install:
        type: string
        required: false
        default: npm ci
    secrets:
      gh_token: 
        required: true
      npm_token:
        required: true

jobs:
  has:
    name: Check Secrets
    runs-on: ubuntu-latest
    steps:
    - id: secrets
      env:
        npm_token: ${{ secrets.npm_token }}
        gh_token: ${{ secrets.gh_token }}
      if: ${{ env.npm_token != '' && env.gh_token != '' }}
      run:
        echo "::set-output name=secrets::1"
    outputs:
      secrets: ${{ steps.secrets.outputs.secrets }}

  release-candidate:
    name: Candidate
    needs: has
    if: ${{ needs.has.outputs.secrets }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
        with:
          # This makes Actions fetch all Git history so that Changesets can generate changelogs with the correct commits
          fetch-depth: 0

      - name: Set up Node
        uses: actions/setup-node@v2
        with:
          node-version: 16

      - name: Install dependencies
        run: ${{ inputs.install }}

      - name: Build
        run: npm run build --if-present

      - name: Create .npmrc
        run: |
          cat << EOF > "$HOME/.npmrc"
            //registry.npmjs.org/:_authToken=$NPM_TOKEN
          EOF
        env:
          NPM_TOKEN: ${{ secrets.npm_token }}

      - name: Publish release candidate
        run: |
          version=$(jq -r .version package.json)
          echo "$( jq ".version = \"$(echo $version)-rc.$(git rev-parse --short HEAD)\"" package.json )" > package.json
          yarn publish --tag next
        env:
          GITHUB_TOKEN: ${{ secrets.gh_token }}

      - name: Output candidate version
        uses: actions/github-script@v4.0.2
        with:
          script: |
            const package = require(`${process.env.GITHUB_WORKSPACE}/package.json`)
            github.repos.createCommitStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              sha: context.sha,
              state: 'success',
              context: `Published ${package.name}`,
              description: package.version,
              target_url: `https://unpkg.com/${package.name}@${package.version}/`
            })
